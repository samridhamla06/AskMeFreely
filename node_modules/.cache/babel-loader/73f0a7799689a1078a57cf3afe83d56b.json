{"ast":null,"code":"import { ACCESS_TOKEN, GOOGLE_AUTH_URL, LOGGED_IN_NAME, LOGGED_IN_EMAIL } from '../constants/url';\nimport swal from 'sweetalert';\nexport var validateTokenAndLogin = function validateTokenAndLogin(tokenId, updateUser) {\n  fetch(GOOGLE_AUTH_URL, {\n    method: \"POST\",\n    body: JSON.stringify({\n      token: tokenId\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"authorization\": tokenId\n    }\n  }).then(function (res) {\n    return res.json();\n  }).then(function (res) {\n    // store returned user somehow\n    console.log('Update the user', res);\n\n    if (res.errorCode) {\n      handleLogout(updateUser);\n      return;\n    } //update user state\n\n\n    updateUser(res, true); //add token to local storage\n\n    localStorage.setItem(ACCESS_TOKEN, tokenId);\n    localStorage.setItem(LOGGED_IN_NAME, res.name);\n    localStorage.setItem(LOGGED_IN_EMAIL, res.email);\n  }).catch(function (err) {\n    console.log('the error with the token', err);\n  });\n};\nexport var handleLoginFailure = function handleLoginFailure(result) {//swal(\"Google Login Failed\", \"error\");\n};\nexport var handleLogin = function handleLogin(googleData, updateUser) {\n  console.log('Try to login', googleData);\n\n  if (!googleData.tokenId) {\n    console.log('Token NOT present');\n    return;\n  }\n\n  console.log('local storage is', localStorage);\n  validateTokenAndLogin(googleData.tokenId, updateUser);\n};\nexport var handleLogout = function handleLogout(updateUser) {\n  console.log('logout is called');\n  updateUser(null, false); //delete the access token as well\n\n  localStorage.removeItem(ACCESS_TOKEN);\n  localStorage.removeItem(LOGGED_IN_EMAIL);\n  localStorage.removeItem(LOGGED_IN_NAME);\n};\nexport var checkTokenFromResponse = function checkTokenFromResponse(response, updateUser) {\n  if (response.errorCode && response.errorCode === '400-001') {\n    swal(\"Oops!\", \"Your session is expired, Please Log in again\", \"error\");\n    handleLogout(updateUser);\n    return true;\n  }\n\n  return false;\n};","map":{"version":3,"sources":["E:/WORK/RAW_Downloads/AskMeFreely/src/utils/UserLoginUtils.js"],"names":["ACCESS_TOKEN","GOOGLE_AUTH_URL","LOGGED_IN_NAME","LOGGED_IN_EMAIL","swal","validateTokenAndLogin","tokenId","updateUser","fetch","method","body","JSON","stringify","token","headers","then","res","json","console","log","errorCode","handleLogout","localStorage","setItem","name","email","catch","err","handleLoginFailure","result","handleLogin","googleData","removeItem","checkTokenFromResponse","response"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,eAAvB,EAAwCC,cAAxC,EAAwDC,eAAxD,QAA+E,kBAA/E;AACA,OAAOC,IAAP,MAAiB,YAAjB;AAEA,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,OAAD,EAAUC,UAAV,EAAyB;AAC1DC,EAAAA,KAAK,CAACP,eAAD,EAAkB;AACnBQ,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,MAAAA,KAAK,EAAEP;AADU,KAAf,CAFa;AAKnBQ,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,uBAAiBR;AAFZ;AALU,GAAlB,CAAL,CAUKS,IAVL,CAUU,UAACC,GAAD;AAAA,WAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,GAVV,EAWKF,IAXL,CAWU,UAACC,GAAD,EAAS;AACX;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BH,GAA/B;;AACA,QAAGA,GAAG,CAACI,SAAP,EAAiB;AACbC,MAAAA,YAAY,CAACd,UAAD,CAAZ;AACA;AACH,KANU,CAOX;;;AACAA,IAAAA,UAAU,CAACS,GAAD,EAAM,IAAN,CAAV,CARW,CASX;;AACAM,IAAAA,YAAY,CAACC,OAAb,CAAqBvB,YAArB,EAAmCM,OAAnC;AACAgB,IAAAA,YAAY,CAACC,OAAb,CAAqBrB,cAArB,EAAqCc,GAAG,CAACQ,IAAzC;AACAF,IAAAA,YAAY,CAACC,OAAb,CAAqBpB,eAArB,EAAsCa,GAAG,CAACS,KAA1C;AACH,GAxBL,EAyBKC,KAzBL,CA0BQ,UAAAC,GAAG,EAAI;AACHT,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCQ,GAAxC;AACH,GA5BT;AA6BH,CA9BM;AAgCP,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,MAAD,EAAY,CAC1C;AACH,CAFM;AAIP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,UAAD,EAAaxB,UAAb,EAA4B;AACnDW,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BY,UAA5B;;AAEA,MAAI,CAACA,UAAU,CAACzB,OAAhB,EAAyB;AACrBY,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA;AACH;;AAEDD,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCG,YAAhC;AAEAjB,EAAAA,qBAAqB,CAAC0B,UAAU,CAACzB,OAAZ,EAAqBC,UAArB,CAArB;AACH,CAXM;AAaP,OAAO,IAAMc,YAAY,GAAG,SAAfA,YAAe,CAACd,UAAD,EAAgB;AACxCW,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAZ,EAAAA,UAAU,CAAC,IAAD,EAAO,KAAP,CAAV,CAFwC,CAGxC;;AACAe,EAAAA,YAAY,CAACU,UAAb,CAAwBhC,YAAxB;AACAsB,EAAAA,YAAY,CAACU,UAAb,CAAwB7B,eAAxB;AACAmB,EAAAA,YAAY,CAACU,UAAb,CAAwB9B,cAAxB;AACH,CAPM;AASP,OAAO,IAAM+B,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,QAAD,EAAW3B,UAAX,EAA0B;AAC5D,MAAG2B,QAAQ,CAACd,SAAT,IAAsBc,QAAQ,CAACd,SAAT,KAAuB,SAAhD,EAA0D;AACtDhB,IAAAA,IAAI,CAAC,OAAD,EAAU,8CAAV,EAA0D,OAA1D,CAAJ;AACAiB,IAAAA,YAAY,CAACd,UAAD,CAAZ;AACA,WAAO,IAAP;AACH;;AACD,SAAO,KAAP;AACH,CAPM","sourcesContent":["import { ACCESS_TOKEN, GOOGLE_AUTH_URL, LOGGED_IN_NAME, LOGGED_IN_EMAIL } from '../constants/url';\r\nimport swal from 'sweetalert';\r\n\r\nexport const validateTokenAndLogin = (tokenId, updateUser) => {\r\n    fetch(GOOGLE_AUTH_URL, {\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n            token: tokenId\r\n        }),\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"authorization\": tokenId\r\n        }\r\n    })\r\n        .then((res) => res.json())\r\n        .then((res) => {\r\n            // store returned user somehow\r\n            console.log('Update the user', res);\r\n            if(res.errorCode){\r\n                handleLogout(updateUser);\r\n                return;\r\n            }\r\n            //update user state\r\n            updateUser(res, true);\r\n            //add token to local storage\r\n            localStorage.setItem(ACCESS_TOKEN, tokenId);\r\n            localStorage.setItem(LOGGED_IN_NAME, res.name);\r\n            localStorage.setItem(LOGGED_IN_EMAIL, res.email);\r\n        })\r\n        .catch(\r\n            err => {\r\n                console.log('the error with the token', err);\r\n            });\r\n}\r\n\r\nexport const handleLoginFailure = (result) => {\r\n    //swal(\"Google Login Failed\", \"error\");\r\n}\r\n\r\nexport const handleLogin = (googleData, updateUser) => {\r\n    console.log('Try to login', googleData);\r\n\r\n    if (!googleData.tokenId) {\r\n        console.log('Token NOT present');\r\n        return;\r\n    }\r\n\r\n    console.log('local storage is', localStorage);\r\n\r\n    validateTokenAndLogin(googleData.tokenId, updateUser);\r\n}\r\n\r\nexport const handleLogout = (updateUser) => {\r\n    console.log('logout is called');\r\n    updateUser(null, false);\r\n    //delete the access token as well\r\n    localStorage.removeItem(ACCESS_TOKEN);\r\n    localStorage.removeItem(LOGGED_IN_EMAIL);\r\n    localStorage.removeItem(LOGGED_IN_NAME);\r\n}\r\n\r\nexport const checkTokenFromResponse = (response, updateUser) => {\r\n    if(response.errorCode && response.errorCode === '400-001'){\r\n        swal(\"Oops!\", \"Your session is expired, Please Log in again\", \"error\");\r\n        handleLogout(updateUser);  \r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}